импорт РасширенияКоллекций


@Обработчик
метод ПередЗаписью(До: РасходТовара.Данные, ПараметрыЗаписи: РасходТовара.ПараметрыЗаписи)
    
    СуммаПоДокументу = Итерируемое.ИзКоллекции(Список).СуммаПо((х) -> х.Сумма)

    если не Проведен и не ПараметрыЗаписи.РежимЗаписиДокумента == Неопределено
        Проведен = ПараметрыЗаписи.РежимЗаписиДокумента == РежимЗаписиДокумента.Проведение
    иначе если не ПараметрыЗаписи.РежимЗаписиДокумента == Неопределено
        Проведен = ПараметрыЗаписи.РежимЗаписиДокумента != РежимЗаписиДокумента.ОтменаПроведения
    ;
;

@Обработчик
метод ПослеЗаписи(До: РасходТовара.Данные, ПараметрыЗаписи: РасходТовара.ПараметрыЗаписи)
    если ПараметрыЗаписи.РежимЗаписиДокумента == Неопределено
        возврат
    ;

    если ПараметрыЗаписи.РежимЗаписиДокумента == РежимЗаписиДокумента.Запись
        возврат
    ;

    знч НаборЗаписей = новый ОстаткиТоваров.НаборЗаписей()
    НаборЗаписей.Фильтр.Установить(Регистратор = этот.Ссылка)
    НаборЗаписей.Записать(Замещать = Истина)

    если ПараметрыЗаписи.РежимЗаписиДокумента == РежимЗаписиДокумента.ОтменаПроведения
        возврат
    ;

    знч НовыйНаборЗаписей = новый ОстаткиТоваров.НаборЗаписей()
    НовыйНаборЗаписей.Фильтр.Установить(Регистратор = этот.Ссылка)

    для Строка из Список
        НовыйНаборЗаписей.Добавить(
            новый ОстаткиТоваров.Запись(
                Регистратор = этот.Ссылка,
                Период = ДатаВремя.Сейчас(),
                ВидЗаписи = ВидЗаписиРегистраНакопления.Расход,
                Товар = Строка.Товар,
                Количество = Строка.Количество))
    ;

    НовыйНаборЗаписей.Записать()
;